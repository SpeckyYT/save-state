extract obj_props
extract obj_ids

setup_distance = 200
section_move = 100
offset = {
    x: 250,
    y: 2175,
}
let setup_count = 0

hitbox = (block_id: @block, group_id: @group) => obj {
    OBJ_ID: special.COLLISION_BLOCK,
    X: setup_distance * setup_count + offset.x,
    GROUPS: group_id,
    BLOCK_A: block_id,
}

default_hitboxes = [ ?b, ?b ]

hitbox_ids = (index: @number = 0) => {
    g: ?g,
    b: ?b if index == 0 else default_hitboxes[index - 1],
}

type @save_state
impl @save_state {
    new: #[constructor] (bits: @number&>=1 = 1) -> @save_state {
        if bits == 1 {
            a = hitbox_ids()
            b = hitbox_ids(1)
            c = hitbox_ids(2)
        
            hitbox(a.b, a.g).with(Y, 0 + offset.y).with(DYNAMIC_BLOCK, true).add()
            hitbox(b.b, b.g).with(Y, 60 + offset.y).add()
            hitbox(c.b, c.g).with(Y, 90 + offset.y).add()

            bit = counter(bits = 1)
            setup_count++

            $.extend_trigger_func(0g, (){
                on(collision(a.b, b.b), !{
                    c.g.toggle_off()
                    // falsy state
                })
                on(collision(a.b, c.b), !{
                    b.g.toggle_off()
                    // truthy state
                    bit++
                })
                frames(1)
                a.g.move(x = 0, y = 25, duration = 0) // collider
            })

            return @save_state::{
                sum: bit,
                bits: [bit],
                block_a: [a],
                block_b: [b],
                block_c: [c],
            }
        } else {
            states = [@save_state::new(bits = 1) for i in 0..bits]
            sum = counter(bits = bits)

            $.extend_trigger_func(0g, (){
                frames(1)
                for i in 0..states.length {
                    if states[i].sum == 1 {
                        sum += 2^i
                    }
                }
            })

            return @save_state::{
                sum: sum,
                bits: states.map(s => s.sum),
                block_a: states.map(s => s.block_a[0]),
                block_b: states.map(s => s.block_b[0]),
                block_c: states.map(s => s.block_c[0]),
            }
        }
    },
    save: (self, value: @number & >=0 | @counter | @bool) -> @NULL {
        match value {
            @bool: self.save(value as @number),
            @number: (){
                let bits = [$.floor(value/(2^i))%2 for i in 0..self.bits.length]
                for i in 0..bits.length {
                    group = self.block_b[i].g if value == 1 else self.block_c[i].g
                    -> group.move(x = section_move, y = 0, duration = 0)
                    -> group.move(x = -section_move, y = 0, duration = 0.01)
                }
            }(),
            @counter: (){
                clone = value.clone()
                for i in 0..self.bits.length {
                    numb = (clone % 2).to_const(0..2)
                    group = self.block_b[i].g if numb == 1 else self.block_c[i].g
                    -> group.move(x = section_move, y = 0, duration = 0)
                    -> group.move(x = -section_move, y = 0, duration = 0.01)
                    clone /= 2
                }
            }(),
        }
    },
}
