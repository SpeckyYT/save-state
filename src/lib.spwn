extract obj_props
extract obj_ids

type @save_state_global

setup_distance = 200
section_move = 100 / 3
offset = {
    x: 250,
    y: 2175,
}
let setup_count = 0

hitbox = (block_id: @block, group_id: @group) => obj {
    OBJ_ID: special.COLLISION_BLOCK,
    X: setup_distance * setup_count + offset.x,
    GROUPS: group_id,
    BLOCK_A: block_id,
}

default_hitboxes = [ ?b, ?b ]

hitbox_ids = (index: @number = 0) => {
    g: ?g,
    b: ?b if index == 0 else default_hitboxes[index - 1],
}

run_0g_code = (code: @macro) {
    $.extend_trigger_func(0g, code)
}

run_0g_code((){
    let @save_state_global::update_section_gropus = []
})

find = (array: @array, macro: (_) -> @bool) {
    for i in 0..array.length {
        if macro(array[i]) { return array[i] } 
    }
    return null
}

update_section = (group: @group) {
    let cache = find(@save_state_global::update_section_gropus, v => v[0] == group)

    if cache == null {
        func = !{
            -> group.move(x = section_move, y = 0, duration = 0)
            -> group.move(x = -section_move, y = 0, duration = 0.01)
        }
        run_0g_code(() {
            @save_state_global::update_section_gropus.push([group, func])
        })
    } else {
        cache[1]!
    }
}

run_0g_code(() {
    -> () {
        frames(1)
        let @save_state_global::first_frame = $.trigger_fn_context()
    } ()
    -> () {
        frames(3)
        let @save_state_global::third_frame = $.trigger_fn_context()
    } ()
})

type @save_state
impl @save_state {
    new: #[constructor] (bits: @number&>=1 = 1, create_sum: @bool = true) -> @save_state {
        if bits == 1 {
            a = hitbox_ids()
            b = hitbox_ids(1)
            c = hitbox_ids(2)
        
            // do not invert the sequence of these hitboxes
            // otherwise the default bit may be different
            hitbox(b.b, b.g).with(Y, 90 + offset.y).add()
            hitbox(c.b, c.g).with(Y, 60 + offset.y).add()
            hitbox(a.b, a.g).with(Y, 0 + offset.y).with(DYNAMIC_BLOCK, true).add()

            bit = counter(bits = 1, reset = false)
            setup_count++

            $.extend_trigger_func(0g, (){
                on(collision(a.b, b.b), !{
                    c.g.toggle_off()
                    a.g.toggle_off()
                    // falsy state
                })
                on(collision(a.b, c.b), !{
                    b.g.toggle_off()
                    a.g.toggle_off()
                    // truthy state
                    bit++
                })
            })
            $.extend_trigger_func(@save_state_global::first_frame, (){
                a.g.move(x = 0, y = 25, duration = 0) // collider
            })

            return @save_state::{
                sum: bit,
                bits: [bit],
                block_a: [a],
                block_b: [b],
                block_c: [c],
            }
        } else {
            // states = [@save_state::new(bits = 1) for i in 0..bits]
            let states = []
            for i in 0..bits { states.push(@save_state::new(bits = 1)) }

            sum = counter(bits = bits, reset = false)

            if create_sum {
                $.extend_trigger_func(@save_state_global::third_frame, (){
                    for i in 0..states.length {
                        if states[i].sum == 1 {
                            sum += 2^i
                        }
                    }
                })
            }

            return @save_state::{
                sum: sum,
                bits: states.map(s => s.sum),
                block_a: states.map(s => s.block_a[0]),
                block_b: states.map(s => s.block_b[0]),
                block_c: states.map(s => s.block_c[0]),
            }
        }
    },
    save: (self, value: @number & >=0 | @counter | @bool) -> @NULL {
        match value {
            @bool: self.save(value as @number),
            @number: (){
                let bits = [$.floor(value/(2^i))%2 for i in 0..self.bits.length]
                for i in 0..bits.length {
                    update_section(
                        self.block_b[i].g if bits[i] == 1 else self.block_c[i].g
                    )
                }
            }(),
            @counter: (){
                // tested .to_const(), it's extremely good with caching
                numb = value.to_const(0..self.bits.length)
                self.save(numb)

                /*
                clone = value.clone()
                for i in 0..self.bits.length {
                    remainder = counter(bits = 1)
                    clone.divide(2, remainder = remainder)
                    
                    if remainder == 1 {
                        update_section(self.block_b[i].g)
                    } else {
                        update_section(self.block_c[i].g)
                    }
                }
                */
            }(),
        }
    },
}
