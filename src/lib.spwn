extract obj_props
extract obj_ids

setup_distance = 100
section_move = 40
offset = {
    x: 50,
    y: 10000,
}
let setup_count = 0

hitbox = (block_id: @block, group_id: @group) => obj {
    OBJ_ID: special.COLLISION_BLOCK,
    X: setup_distance * setup_count + offset.x,
    GROUPS: group_id,
    BLOCK_A: block_id,
}

hitbox_ids = () => { g: ?g, b: ?b }

type @save_state
impl @save_state {
    new: #[constructor] () {
        a = hitbox_ids()
        b = hitbox_ids()
        c = hitbox_ids()
    
        hitbox(a.b, a.g).with(Y, 0 + offset.y).with(DYNAMIC_BLOCK, true).add()
        hitbox(b.b, b.g).with(Y, 60 + offset.y).add()
        hitbox(c.b, c.g).with(Y, 90 + offset.y).add()
    
        bit = counter(bits = 1)
        setup_count++
    
        $.extend_trigger_func(0g, (){
            on(collision(a.b, b.b), !{
                c.g.toggle_off()
            })
            on(collision(a.b, c.b), !{
                b.g.toggle_off()
                bit++
            })
            a.g.move(x = 0, y = 25)
        })

        return @save_state::{
            bit: bit,
            block_a: a,
            block_b: b,
            block_c: c,
        }
    },
    save: (self, value: @bool = true){
        group = self.block_b.g if value else self.block_c.g
        group.move(x = section_move, y = 0, duration = 0)
        group.move(x = -section_move, y = 0, duration = 0.01)
    },
}
